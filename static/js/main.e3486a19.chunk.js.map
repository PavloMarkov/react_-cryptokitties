{"version":3,"sources":["components/Footer/Footer.tsx","components/Header/Header.tsx","api/cat.ts","types/SortByField.ts","components/Loader/paw_loader.png","components/Loader/Loader.tsx","components/MainContent/CatList/CatList.tsx","components/MainContent/Maincontent.tsx","App.tsx","index.tsx"],"names":["Footer","className","href","Header","request","UIdata","fetch","method","headers","then","response","ok","Error","json","SortByField","client","Loader","src","paw","alt","CatList","list","pageStart","hasMore","catsPerPage","addCats","nextPage","toShow","loadMore","res","cats","loader","map","card","name","category","image_url","price","available","id","MainContent","useState","isListOfCatsLoading","setIsListOfCatsLoading","listOfCats","setListOfCats","sortMethod","setSordMethod","NONE","sortBy","setSortBy","pageCount","setPageCount","setCatsPerPage","currentPage","setCurrentPage","useEffect","pagination_info","total_pages","finally","onChange","e","target","value","ID","NAME","CATEGORY","PRICE","type","onClick","breakLabel","nextLabel","previousLabel","onPageChange","console","log","selected","pageRangeDisplayed","marginPagesDisplayed","containerClassName","previousLinkClassName","breakClassName","nextLinkClassName","pageClassName","disabledClassName","activeClassName","activeLinkClassName","newCats","prev","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3486a19.chunk.js","sourcesContent":["import React from 'react';\nimport './Footer.scss';\n\nexport const Footer: React.FC = () => {\n  return (\n    <footer className=\"footer\">\n      <section>\n        <a\n          href=\"https://github.com/PavloMarkov?tab=repositories\"\n          className=\"footer__link\"\n        >\n          Powered by Pavlo Markov\n        </a>\n      </section>\n    </footer>\n  );\n};\n","import React from 'react';\nimport './Header.scss';\n\nexport const Header: React.FC = () => {\n  return (\n    <header className=\"header\">\n      <nav>Kittens</nav>\n    </header>\n  );\n};\n","const BASE_URL = 'https://ftl-cryptokitties.fly.dev/api/crypto_kitties';\n\nfunction request<T>(\n  UIdata: string,\n): Promise<T> {\n  const options: RequestInit = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n  };\n\n  return fetch(BASE_URL + UIdata, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  getSorted: <Response>(UIdata: string) => request<Response>(UIdata),\n  getPaginated: <Response>(UIdata: string) => request<Response>(UIdata),\n};\n","// eslint-disable-next-line no-shadow\nexport enum SortByField {\n  NONE = '',\n  ID = 'id',\n  NAME = 'name',\n  CATEGORY = 'category',\n  PRICE = 'price',\n}\n","export default __webpack_public_path__ + \"static/media/paw_loader.01294796.png\";","import React from 'react';\nimport './Loader.scss';\nimport paw from './paw_loader.png';\n\nexport const Loader: React.FC = () => {\n  return (\n    (\n      <div className=\"loader\">\n        <h2>Cat&apos;s are coming!</h2>\n        <img\n          className=\"loader__paw\"\n          src={paw}\n          alt=\"loading...\"\n        />\n      </div>\n    )\n  );\n};\n","import React from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Response } from '../../../types/Response';\nimport { client } from '../../../api/cat';\nimport { CatCard } from '../../../types/CatCard';\nimport './CatList.scss';\n\ntype Props = {\n  list: CatCard[];\n  pageStart: number;\n  hasMore: boolean;\n  catsPerPage: number;\n  addCats: (cats: CatCard[]) => void;\n  nextPage: () => void;\n};\n\nexport const CatList: React.FC<Props> = ({\n  list, pageStart, hasMore, catsPerPage, addCats, nextPage,\n}) => {\n  const toShow = [...list];\n  const loadFunc = () => {\n    client.getPaginated<Response>(`?limit_per_page=${catsPerPage}&current_page=${pageStart + 2}`)\n      .then(res => {\n        addCats(res.cats);\n        nextPage();\n      });\n  };\n\n  return (\n    <InfiniteScroll\n      pageStart={pageStart}\n      loadMore={loadFunc}\n      hasMore={hasMore}\n      loader={<div className=\"loader\" key={0}>Loading ...</div>}\n    >\n      <section className=\"card-list page__list\">\n        {toShow.map(card => (\n          <div\n            className=\"card\"\n            key={card.id}\n          >\n            <div className=\"card__info\">\n              <h1 className=\"card__name\">{card.name}</h1>\n              <div className=\"card__img\">\n                <div className=\"card__category\">\n                  {card.category}\n                </div>\n                <img\n                  src={card.image_url}\n                  alt={card.name}\n                />\n                <div className=\"card__price\">{`${card.price}$`}</div>\n              </div>\n              <div className=\"card__available\">\n                {`Now is ${card.available ? 'available' : 'not available'}`}\n              </div>\n            </div>\n          </div>\n        ))}\n      </section>\n    </InfiniteScroll>\n  );\n};\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport ReactPaginate from 'react-paginate';\nimport { client } from '../../api/cat';\nimport { CatCard } from '../../types/CatCard';\nimport { SortByField } from '../../types/SortByField';\nimport { SortMethod } from '../../types/SortMethod';\nimport { Loader } from '../Loader/Loader';\nimport './MainContent.scss';\nimport { Response } from '../../types/Response';\nimport { Page } from '../../types/Page';\nimport { CatList } from './CatList/CatList';\n\nexport const MainContent: React.FC = () => {\n  const [isListOfCatsLoading, setIsListOfCatsLoading] = useState(false);\n  const [listOfCats, setListOfCats] = useState<CatCard[]>([]);\n\n  const [sortMethod, setSordMethod] = useState<SortMethod>('');\n  const [sortBy, setSortBy] = useState<SortByField>(SortByField.NONE);\n\n  const [pageCount, setPageCount] = useState(1);\n  const [catsPerPage, setCatsPerPage] = useState(50);\n  const [currentPage, setCurrentPage] = useState(0);\n\n  useEffect(() => {\n    setIsListOfCatsLoading(true);\n    fetch(\n      'https://ftl-cryptokitties.fly.dev/api/crypto_kitties',\n    )\n      .then(res => res.json())\n      .then(res => {\n        setListOfCats(res.cats);\n        setPageCount(res.pagination_info.total_pages);\n      })\n      .finally(() => setIsListOfCatsLoading(false));\n  }, []);\n\n  const handlePageClick = (e: Page) => {\n    console.log(e);\n\n    setCurrentPage(e.selected);\n    setIsListOfCatsLoading(true);\n    client.getPaginated<Response>(`?limit_per_page=${catsPerPage}&current_page=${currentPage + 1}`)\n      .then(res => setListOfCats(res.cats))\n      .finally(() => setIsListOfCatsLoading(false));\n  };\n\n  const addCats = (newCats: CatCard[]) => {\n    setListOfCats(prev => [...prev, ...newCats]);\n  };\n\n  const addNextPageData = () => setCurrentPage(prev => prev + 1);\n\n  return (\n    <main className=\"page__main\">\n      {!isListOfCatsLoading\n        ? (\n          <>\n            <section className=\"page__sort sort\">\n              <h4 className=\"sort__title\">Sort by:</h4>\n              <select\n                onChange={(e) => setSortBy(e.target.value as SortByField)}\n                className=\"sort__select\"\n                value={sortBy}\n              >\n                <option value={SortByField.NONE}>Need to sort?</option>\n                <option value={SortByField.ID}>ID</option>\n                <option value={SortByField.NAME}>Name</option>\n                <option value={SortByField.CATEGORY}>Category</option>\n                <option value={SortByField.PRICE}>Price</option>\n              </select>\n              <select\n                onChange={(e) => setSordMethod(e.target.value as SortMethod)}\n                className=\"sort__select\"\n                value={sortMethod}\n              >\n                <option value=\"\">Sort type</option>\n                <option value=\"asc\">asc</option>\n                <option value=\"desc\">desc</option>\n              </select>\n              <button\n                type=\"button\"\n                className=\"sort_btn\"\n                onClick={() => {\n                  setIsListOfCatsLoading(true);\n                  client.getSorted<Response>(`?sort_by=${sortBy || 'id'}&sort_dir=${sortMethod || 'asc'}`)\n                    .then(res => setListOfCats(res.cats))\n                    .finally(() => setIsListOfCatsLoading(false));\n                }}\n              >\n                Sort cats!\n              </button>\n              <h4>\n                Meow&apos;s per page\n              </h4>\n              <select\n                onChange={(e) => setCatsPerPage(+e.target.value)}\n                className=\"sort__select\"\n                id=\"per-page\"\n                value={catsPerPage}\n              >\n                <option value={50}>50</option>\n                <option value={20}>20</option>\n                <option value={100}>100</option>\n              </select>\n              <button\n                type=\"button\"\n                className=\"pagination_btn\"\n                onClick={() => {\n                  setCurrentPage(0);\n                  client.getPaginated<Response>(`?per_page=${catsPerPage}&page=${currentPage + 1}`)\n                    .then(res => {\n                      setListOfCats(res.cats);\n                      setPageCount(res.pagination_info.total_pages);\n                    });\n                }}\n              >\n                View cats!\n              </button>\n            </section>\n            <ReactPaginate\n              breakLabel=\"...\"\n              nextLabel=\"next >\"\n              previousLabel=\"< prev\"\n              onPageChange={handlePageClick}\n              pageRangeDisplayed={3}\n              marginPagesDisplayed={1}\n              pageCount={pageCount}\n              containerClassName=\"pagination__container\"\n              previousLinkClassName=\"pagination__previous\"\n              breakClassName=\"pagination__page\"\n              nextLinkClassName=\"pagination__next\"\n              pageClassName=\"pagination__page\"\n              disabledClassName=\"pagination__disabled\"\n              activeClassName=\"pagination__active\"\n              activeLinkClassName=\"pagination__link\"\n            />\n            <CatList\n              list={listOfCats}\n              pageStart={currentPage}\n              hasMore={pageCount > currentPage}\n              catsPerPage={catsPerPage}\n              addCats={addCats}\n              nextPage={addNextPageData}\n            />\n          </>\n        )\n        : <Loader />}\n    </main>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { Footer } from './components/Footer/Footer';\nimport { Header } from './components/Header/Header';\nimport { MainContent } from './components/MainContent/Maincontent';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"page\">\n      <Header />\n      <MainContent />\n      <Footer />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}