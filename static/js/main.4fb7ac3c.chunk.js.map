{"version":3,"sources":["components/Footer/Footer.tsx","components/Header/Header.tsx","api/request.ts","types/SortByField.ts","components/Loader/paw_loader.png","components/Loader/Loader.tsx","components/MainContent/defaultPick.png","components/MainContent/CatCardComponent/CatCardComponent.tsx","components/MainContent/CatList/CatList.tsx","components/ArrowUp/ArrowUp.tsx","components/MainContent/Maincontent.tsx","App.tsx","index.tsx"],"names":["Footer","className","href","Header","id","SortByField","client","UIdata","fetch","method","headers","then","response","ok","Error","json","request","Loader","src","paw","alt","CatCardComponent","setId","useState","catCard","setCatCard","useEffect","res","type","onClick","category","name","price","image_url","onError","event","currentTarget","defaultImg","available","CatList","list","pageData","currentPage","addedPage","setAddedPage","listOfCatsToShow","setListOfCatsToShow","catId","setCatId","imageOnErrorHandler","pageStart","loadMore","catsPerPage","sortBy","sortMethod","prev","cats","prevPage","hasMore","pageCount","loader","map","card","ArrowUp","MainContent","isPageLoading","setIsPageLoading","isListOfCatsLoading","setIsListOfCatsLoading","listOfCats","setListOfCats","NONE","setPageData","queryPaginationParams","searchSortParams","pagination_info","total_pages","finally","sortClickHandle","limit_per_page","breakLabel","nextLabel","previousLabel","onPageChange","e","selected","pageRangeDisplayed","marginPagesDisplayed","forcePage","containerClassName","previousLinkClassName","breakClassName","nextLinkClassName","pageClassName","disabledClassName","activeClassName","activeLinkClassName","onChange","target","value","ID","NAME","CATEGORY","PRICE","htmlFor","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8YAGaA,EAAmB,WAC9B,OACE,wBAAQC,UAAU,SAAlB,SACE,kCACE,mBACEC,KAAK,kDACLD,UAAU,eAFZ,0CCJKE,G,MAAmB,WAC9B,OACE,wBAAQF,UAAU,SAASG,GAAG,SAA9B,SACE,8C,8BCgBC,ICrBKC,EDqBCC,EACQ,SAAWC,GAAX,OArBrB,SACEA,GASA,OAAOC,MAZQ,uDAYSD,EAPK,CAC3BE,OAAQ,MACRC,QAAS,CACP,eAAgB,qCAKjBC,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAGZ,OAAOF,EAASG,UAK6BC,CAAkBT,K,SCtBzDF,K,QAAAA,E,QAAAA,E,YAAAA,E,oBAAAA,E,eAAAA,M,eCDG,MAA0B,uCCI5BY,EAAmB,WAC9B,OAEI,sBAAKhB,UAAU,SAAf,UACE,mDACA,qBACEA,UAAU,cACViB,IAAKC,EACLC,IAAI,mB,gCCZC,G,YAAA,IAA0B,yCCa5BC,EAAoC,SAAC,GAAmB,IAAjBjB,EAAgB,EAAhBA,GAAIkB,EAAY,EAAZA,MACtD,EAA8BC,mBAAyB,MAAvD,mBAAOC,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACRpB,EAAA,WAAsCF,IACnCO,MAAK,SAAAgB,GAAG,OAAIF,EAAWE,QACzB,IAQH,OAEIH,EAEI,qBAAKvB,UAAU,WAAf,SACE,sBAAKA,UAAU,sBAAf,UACE,qBAAKA,UAAU,mBAAf,SACE,wBACE2B,KAAK,SACLC,QAASP,EACTrB,UAAU,sBAHZ,iBAQF,qBAAKA,UAAU,qBAAf,SAAqCuB,EAAQM,WAC7C,oBAAI7B,UAAU,iBAAd,SAAgCuB,EAAQO,OACxC,qBAAK9B,UAAU,kBAAf,mBAAqCuB,EAAQQ,MAA7C,OACA,sBAAK/B,UAAU,gBAAf,UACE,qBACEiB,IAAKM,EAAQS,UACbb,IAAG,yBAAoBI,EAAQO,KAA5B,4BACHG,QA5BY,SAC1BC,GAEAA,EAAMC,cAAclB,IAAMmB,GA0BZpC,UAAU,mBAEZ,qBAAKA,UAAU,gBAAf,SACE,wBACE2B,KAAK,SACL3B,UAAU,oBACV4B,QAASP,EAHX,SAKGE,EAAQc,UAAY,UAAY,oCAO3C,cAAC,EAAD,KCjDGC,EAA2B,SAAC,GAGlC,IAFLC,EAEI,EAFJA,KACAC,EACI,EADJA,SAEA,EAAkClB,mBAASkB,EAASC,YAAc,GAAlE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgDrB,mBAASiB,GAAzD,mBAAOK,EAAP,KAAyBC,EAAzB,KACA,EAA0BvB,mBAAS,GAAnC,mBAAOwB,EAAP,KAAcC,EAAd,KAcMC,EAAsB,SAC1Bd,GAEAA,EAAMC,cAAclB,IAAMmB,GAG5B,OACE,qCACE,cAAC,IAAD,CACEa,UAAWT,EAASC,YACpBS,SAlBe,WACnB7C,EAAA,oBAAgDmC,EAASW,YAAzD,iBAA6ET,EAAY,EAAzF,oBAAsGF,EAASY,QAAU,KAAzH,qBAA0IZ,EAASa,YAAc,QAC9J3C,MAAK,SAAAgB,GACJmB,GAAoB,SAAAS,GAAI,4BAAQA,GAAR,YAAiB5B,EAAI6B,UAC7CZ,GAAa,SAAAa,GAAQ,OAAIA,EAAW,SAepCC,QAASjB,EAASkB,UAAYhB,EAC9BiB,OACE,qBAAK3D,UAAU,OAAf,SACE,qBAAKA,UAAU,oBANrB,SAUE,qBAAKA,UAAU,YAAf,SACG4C,EAAiBgB,KAAI,SAAAC,GAAI,OACxB,qBACE7D,UAAU,OADZ,SAIE,sBAAKA,UAAW6D,EAAKxB,UAAY,aAAe,wBAAhD,UACE,oBAAIrC,UAAU,aAAd,SAA4B6D,EAAK/B,OACjC,sBAAK9B,UAAU,YAAf,UACE,qBAAKA,UAAU,iBAAf,SACG6D,EAAKhC,WAER,qBACEZ,IAAK4C,EAAK7B,UACVb,IAAG,6BAAwB0C,EAAK/B,KAA7B,WACHG,QAASe,EACThD,UAAU,eAEZ,qBAAKA,UAAU,cAAf,mBAAiC6D,EAAK9B,MAAtC,OACA,wBACEJ,KAAK,SACL3B,UAAU,kBACV4B,QAAS,kBAAMmB,EAASc,EAAK1D,KAH/B,SAKG0D,EAAKxB,UAAY,YAAc,gBApBjCwB,EAAK1D,WA4BP,IAAV2C,GAAe,cAAC,EAAD,CAAkB3C,GAAI2C,EAAOzB,MA9DnC,WACZ0B,EAAS,UCtBAe,G,MAAoB,WAC/B,OAEI,qBAAK9D,UAAU,WAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,mBAAGC,KAAK,UAAR,2BCMG8D,EAAwB,WACnC,MAA0CzC,oBAAS,GAAnD,mBAAO0C,EAAP,KAAsBC,EAAtB,KACA,EAAsD3C,oBAAS,GAA/D,mBAAO4C,EAAP,KAA4BC,EAA5B,KACA,EAAoC7C,mBAAoB,IAAxD,mBAAO8C,EAAP,KAAmBC,EAAnB,KAEA,EAAgC/C,mBAAqB,CACnD8B,OAAQhD,EAAYkE,KACpBjB,WAAY,GACZK,UAAW,EACXP,YAAa,GACbV,YAAa,IALf,mBAAOD,EAAP,KAAiB+B,EAAjB,KAQMC,EAAqB,gBAAYhC,EAASC,YAAc,EAAnC,qBAAiDD,EAASW,aAC/EsB,EAAgB,mBAAejC,EAASY,QAAU,KAAlC,qBAAmDZ,EAASa,YAAc,OAEhG5B,qBAAU,WACR0C,GAAuB,GACvB5D,MACE,wDAECG,MAAK,SAAAgB,GAAG,OAAIA,EAAIZ,UAChBJ,MAAK,SAAAgB,GACJ2C,EAAc3C,EAAI6B,MAClBgB,GAAY,SAAAjB,GAAI,kCACXA,GADW,IAEdI,UAAWhC,EAAIgD,gBAAgBC,oBAGlCC,SAAQ,WACPX,GAAiB,GACjBE,GAAuB,QAE1B,IAEH1C,qBAAU,WACHuC,IACHG,GAAuB,GACvB9D,EAAmCmE,EAAwBC,GACxD/D,MAAK,SAAAgB,GACJ2C,EAAc3C,EAAI6B,MAClBgB,GAAY,SAAAjB,GAAI,kCACXA,GADW,IAEdI,UAAWhC,EAAIgD,gBAAgBC,oBAGlCC,SAAQ,kBAAMT,GAAuB,SAEzC,CAAC3B,EAASC,cAEb,IAOMoC,EAAkB,WACtBV,GAAuB,GACvB9D,EAAA,WAAuCoE,EAAvC,4BAA2EjC,EAASW,cACjFzC,MAAK,SAAAgB,GACJ2C,EAAc3C,EAAI6B,MAClBgB,GAAY,SAAAjB,GAAI,kCACXA,GADW,IAEdb,YAAa,EACbiB,UAAWhC,EAAIgD,gBAAgBC,YAC/BxB,YAAazB,EAAIgD,gBAAgBI,uBAGpCF,SAAQ,kBAAMT,GAAuB,OAG1C,OACE,sBAAMnE,UAAU,aAAhB,SACIkE,EA0FE,cAAC,EAAD,IAxFA,qCACE,cAAC,EAAD,IACA,cAAC,IAAD,CACEa,WAAW,MACXC,UAAU,IACVC,cAAc,IACdC,aAhCY,SAACC,GACvBZ,GAAY,SAAAjB,GAAI,kCACXA,GADW,IAEdb,YAAa0C,EAAEC,eA8BPC,mBAAoB,EACpBC,qBAAsB,EACtBC,UAAW/C,EAASC,YACpBiB,UAAWlB,EAASkB,UACpB8B,mBAAmB,wBACnBC,sBAAsB,uBACtBC,eAAe,mBACfC,kBAAkB,mBAClBC,cAAc,mBACdC,kBAAkB,uBAClBC,gBAAgB,qBAChBC,oBAAoB,qBAEtB,sBAAK/F,UAAU,kBAAf,UACE,0BAASA,UAAU,cAAnB,UACE,yBACEgG,SAAU,SAACb,GAAD,OAAOZ,GAAY,SAAAjB,GAAI,kCAC5BA,GAD4B,IAE/BF,OAAQ+B,EAAEc,OAAOC,YAEnBlG,UAAU,eACVkG,MAAO1D,EAASY,OANlB,UAQE,wBAAQ8C,MAAO9F,EAAYkE,KAA3B,2BACA,wBAAQ4B,MAAO9F,EAAY+F,GAA3B,mBACA,wBAAQD,MAAO9F,EAAYgG,KAA3B,qBACA,wBAAQF,MAAO9F,EAAYiG,SAA3B,yBACA,wBAAQH,MAAO9F,EAAYkG,MAA3B,yBAEF,yBACEN,SAAU,SAACb,GAAD,OAAOZ,GAAY,SAAAjB,GAAI,kCAC5BA,GAD4B,IAE/BD,WAAY8B,EAAEc,OAAOC,YAEvBlG,UAAU,eACVkG,MAAO1D,EAASa,WANlB,UAQE,wBAAQ6C,MAAM,GAAd,uBACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,OAAd,qBAEF,wBACEvE,KAAK,SACL3B,UAAU,YACV4B,QAAS,kBAAMiD,KAHjB,2BAQF,0BAAS7E,UAAU,cAAnB,UACE,wBAAOuG,QAAQ,WAAf,6BAEE,yBACEP,SAAU,SAACb,GAAD,OAAOZ,GAAY,SAAAjB,GAAI,kCAC5BA,GAD4B,IAE/BH,aAAcgC,EAAEc,OAAOC,YAEzBlG,UAAU,eACVG,GAAG,WACH+F,MAAO1D,EAASW,YAPlB,UASE,wBAAQ+C,MAAO,GAAf,gBACA,wBAAQA,MAAO,GAAf,gBACA,wBAAQA,MAAO,IAAf,uBAGJ,wBACEvE,KAAK,SACL3B,UAAU,YACV4B,QAASiD,EAHX,8BASJ,cAAC,EAAD,CACEtC,KAAM6B,EACN5B,SAAUA,UCxKXgE,EAAgB,WAC3B,OACE,sBAAKxG,UAAU,OAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCNNyG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4fb7ac3c.chunk.js","sourcesContent":["import React from 'react';\nimport './Footer.scss';\n\nexport const Footer: React.FC = () => {\n  return (\n    <footer className=\"footer\">\n      <section>\n        <a\n          href=\"https://github.com/PavloMarkov?tab=repositories\"\n          className=\"footer__link\"\n        >\n          Powered by Pavlo Markov\n        </a>\n      </section>\n    </footer>\n  );\n};\n","import React from 'react';\nimport './Header.scss';\n\nexport const Header: React.FC = () => {\n  return (\n    <header className=\"header\" id=\"header\">\n      <nav>Kittens</nav>\n    </header>\n  );\n};\n","const BASE_URL = 'https://ftl-cryptokitties.fly.dev/api/crypto_kitties';\n\nfunction request<T>(\n  UIdata: string,\n): Promise<T> {\n  const options: RequestInit = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n  };\n\n  return fetch(BASE_URL + UIdata, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  getDataFromServer: <Response>(UIdata: string) => request<Response>(UIdata),\n};\n","// eslint-disable-next-line no-shadow\nexport enum SortByField {\n  NONE = '',\n  ID = 'id',\n  NAME = 'name',\n  CATEGORY = 'category',\n  PRICE = 'price',\n}\n","export default __webpack_public_path__ + \"static/media/paw_loader.01294796.png\";","import React from 'react';\nimport './Loader.scss';\nimport paw from './paw_loader.png';\n\nexport const Loader: React.FC = () => {\n  return (\n    (\n      <div className=\"loader\">\n        <h2>Cat&apos;s are coming!</h2>\n        <img\n          className=\"loader__paw\"\n          src={paw}\n          alt=\"loading...\"\n        />\n      </div>\n    )\n  );\n};\n","export default __webpack_public_path__ + \"static/media/defaultPick.474e7e3f.png\";","/* eslint-disable no-param-reassign */\nimport React, { useEffect, useState } from 'react';\nimport './CatCardComponent.scss';\nimport { client } from '../../../api/request';\nimport { CatCard } from '../../../types/CatCard';\nimport { Loader } from '../../Loader/Loader';\nimport defaultImg from '../defaultPick.png';\n\ntype Props = {\n  id: number;\n  setId: () => void;\n};\n\nexport const CatCardComponent: React.FC<Props> = ({ id, setId }) => {\n  const [catCard, setCatCard] = useState<CatCard | null>(null);\n\n  useEffect(() => {\n    client.getDataFromServer<CatCard>(`/${id}`)\n      .then(res => setCatCard(res));\n  }, []);\n\n  const imageOnErrorHandler = (\n    event: React.SyntheticEvent<HTMLImageElement, Event>,\n  ) => {\n    event.currentTarget.src = defaultImg;\n  };\n\n  return (\n    (\n      catCard\n        ? (\n          <div className=\"cat-card\">\n            <div className=\"cat-card__container\">\n              <div className=\"cat-card__cancel\">\n                <button\n                  type=\"button\"\n                  onClick={setId}\n                  className=\"cat-card__btn-close\"\n                >\n                  X\n                </button>\n              </div>\n              <div className=\"cat-card__category\">{catCard.category}</div>\n              <h2 className=\"cat-card__name\">{catCard.name}</h2>\n              <div className=\"cat-card__price\">{`${catCard.price}$`}</div>\n              <div className=\"cat-card__img\">\n                <img\n                  src={catCard.image_url}\n                  alt={`Here should be ${catCard.name}, but sleeping is first!`}\n                  onError={imageOnErrorHandler}\n                  className=\"cat-card__foto\"\n                />\n                <div className=\"cat-card__buy\">\n                  <button\n                    type=\"button\"\n                    className=\"cat-card__buy-btn\"\n                    onClick={setId}\n                  >\n                    {catCard.available ? 'Buy it!' : 'At it\\'s house already'}\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <Loader />\n        )\n    )\n  );\n};\n","/* eslint-disable no-param-reassign */\nimport React, { useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Response } from '../../../types/Response';\nimport { client } from '../../../api/request';\nimport { CatCard } from '../../../types/CatCard';\nimport './CatList.scss';\nimport { DataOfPage } from '../../../types/DataOfPage';\nimport { CatCardComponent } from '../CatCardComponent/CatCardComponent';\nimport defaultImg from '../defaultPick.png';\n\ntype Props = {\n  list: CatCard[];\n  pageData: DataOfPage;\n};\n\nexport const CatList: React.FC<Props> = ({\n  list,\n  pageData,\n}) => {\n  const [addedPage, setAddedPage] = useState(pageData.currentPage + 1);\n  const [listOfCatsToShow, setListOfCatsToShow] = useState(list);\n  const [catId, setCatId] = useState(0);\n\n  const setId = () => {\n    setCatId(0);\n  };\n\n  const loadMoreCats = () => {\n    client.getDataFromServer<Response>(`?per_page=${pageData.catsPerPage}&page=${addedPage + 1}&sort_by=${pageData.sortBy || 'id'}&sort_dir=${pageData.sortMethod || 'asc'}`)\n      .then(res => {\n        setListOfCatsToShow(prev => [...prev, ...res.cats]);\n        setAddedPage(prevPage => prevPage + 1);\n      });\n  };\n\n  const imageOnErrorHandler = (\n    event: React.SyntheticEvent<HTMLImageElement, Event>,\n  ) => {\n    event.currentTarget.src = defaultImg;\n  };\n\n  return (\n    <>\n      <InfiniteScroll\n        pageStart={pageData.currentPage}\n        loadMore={loadMoreCats}\n        hasMore={pageData.pageCount > addedPage}\n        loader={(\n          <div className=\"load\">\n            <div className=\"load__content\" />\n          </div>\n        )}\n      >\n        <div className=\"card-list\">\n          {listOfCatsToShow.map(card => (\n            <div\n              className=\"card\"\n              key={card.id}\n            >\n              <div className={card.available ? 'card__info' : 'card__info card__sold'}>\n                <h1 className=\"card__name\">{card.name}</h1>\n                <div className=\"card__img\">\n                  <div className=\"card__category\">\n                    {card.category}\n                  </div>\n                  <img\n                    src={card.image_url}\n                    alt={`Here should be cat ${card.name} & it's`}\n                    onError={imageOnErrorHandler}\n                    className=\"card__foto\"\n                  />\n                  <div className=\"card__price\">{`${card.price}$`}</div>\n                  <button\n                    type=\"button\"\n                    className=\"card__available\"\n                    onClick={() => setCatId(card.id)}\n                  >\n                    {card.available ? 'available' : 'Sold'}\n                  </button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </InfiniteScroll>\n      {catId !== 0 && <CatCardComponent id={catId} setId={setId} />}\n    </>\n  );\n};\n","import React from 'react';\nimport './ArrowUp.scss';\n\nexport const ArrowUp: React.FC = () => {\n  return (\n    (\n      <div className=\"arrow-up\">\n        <div className=\"arrow-up__arrow\">\n          <a href=\"#header\"> ↑</a>\n        </div>\n      </div>\n    )\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport ReactPaginate from 'react-paginate';\nimport { client } from '../../api/request';\nimport { CatCard } from '../../types/CatCard';\nimport { SortByField } from '../../types/SortByField';\nimport { SortMethod } from '../../types/SortMethod';\nimport { Loader } from '../Loader/Loader';\nimport './MainContent.scss';\nimport { Response } from '../../types/Response';\nimport { Page } from '../../types/Page';\nimport { CatList } from './CatList/CatList';\nimport { DataOfPage } from '../../types/DataOfPage';\nimport { ArrowUp } from '../ArrowUp/ArrowUp';\n\nexport const MainContent: React.FC = () => {\n  const [isPageLoading, setIsPageLoading] = useState(true);\n  const [isListOfCatsLoading, setIsListOfCatsLoading] = useState(false);\n  const [listOfCats, setListOfCats] = useState<CatCard[]>([]);\n\n  const [pageData, setPageData] = useState<DataOfPage>({\n    sortBy: SortByField.NONE,\n    sortMethod: '',\n    pageCount: 0,\n    catsPerPage: 50,\n    currentPage: 0,\n  });\n\n  const queryPaginationParams = `?page=${pageData.currentPage + 1}&per_page=${pageData.catsPerPage}`;\n  const searchSortParams = `&sort_by=${pageData.sortBy || 'id'}&sort_dir=${pageData.sortMethod || 'asc'}`;\n\n  useEffect(() => {\n    setIsListOfCatsLoading(true);\n    fetch(\n      'https://ftl-cryptokitties.fly.dev/api/crypto_kitties',\n    )\n      .then(res => res.json())\n      .then(res => {\n        setListOfCats(res.cats);\n        setPageData(prev => ({\n          ...prev,\n          pageCount: res.pagination_info.total_pages,\n        }));\n      })\n      .finally(() => {\n        setIsPageLoading(false);\n        setIsListOfCatsLoading(false);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (!isPageLoading) {\n      setIsListOfCatsLoading(true);\n      client.getDataFromServer<Response>(queryPaginationParams + searchSortParams)\n        .then(res => {\n          setListOfCats(res.cats);\n          setPageData(prev => ({\n            ...prev,\n            pageCount: res.pagination_info.total_pages,\n          }));\n        })\n        .finally(() => setIsListOfCatsLoading(false));\n    }\n  }, [pageData.currentPage]);\n\n  const handlePageClick = (e: Page) => {\n    setPageData(prev => ({\n      ...prev,\n      currentPage: e.selected,\n    }));\n  };\n\n  const sortClickHandle = () => {\n    setIsListOfCatsLoading(true);\n    client.getDataFromServer<Response>(`?${searchSortParams}&page=1&per_page=${pageData.catsPerPage}`)\n      .then(res => {\n        setListOfCats(res.cats);\n        setPageData(prev => ({\n          ...prev,\n          currentPage: 0,\n          pageCount: res.pagination_info.total_pages,\n          catsPerPage: res.pagination_info.limit_per_page,\n        }));\n      })\n      .finally(() => setIsListOfCatsLoading(false));\n  };\n\n  return (\n    <main className=\"page__main\">\n      {!isListOfCatsLoading\n        ? (\n          <>\n            <ArrowUp />\n            <ReactPaginate\n              breakLabel=\"...\"\n              nextLabel=\">\"\n              previousLabel=\"<\"\n              onPageChange={handlePageClick}\n              pageRangeDisplayed={3}\n              marginPagesDisplayed={1}\n              forcePage={pageData.currentPage}\n              pageCount={pageData.pageCount}\n              containerClassName=\"pagination__container\"\n              previousLinkClassName=\"pagination__previous\"\n              breakClassName=\"pagination__page\"\n              nextLinkClassName=\"pagination__next\"\n              pageClassName=\"pagination__page\"\n              disabledClassName=\"pagination__disabled\"\n              activeClassName=\"pagination__active\"\n              activeLinkClassName=\"pagination__link\"\n            />\n            <div className=\"page__sort sort\">\n              <section className=\"sort__field\">\n                <select\n                  onChange={(e) => setPageData(prev => ({\n                    ...prev,\n                    sortBy: e.target.value as SortByField,\n                  }))}\n                  className=\"sort__select\"\n                  value={pageData.sortBy}\n                >\n                  <option value={SortByField.NONE}>Need to sort?</option>\n                  <option value={SortByField.ID}>By ID</option>\n                  <option value={SortByField.NAME}>By Name</option>\n                  <option value={SortByField.CATEGORY}>By Category</option>\n                  <option value={SortByField.PRICE}>By Price</option>\n                </select>\n                <select\n                  onChange={(e) => setPageData(prev => ({\n                    ...prev,\n                    sortMethod: e.target.value as SortMethod,\n                  }))}\n                  className=\"sort__select\"\n                  value={pageData.sortMethod}\n                >\n                  <option value=\"\">Sort type</option>\n                  <option value=\"asc\">asc</option>\n                  <option value=\"desc\">desc</option>\n                </select>\n                <button\n                  type=\"button\"\n                  className=\"sort__btn\"\n                  onClick={() => sortClickHandle()}\n                >\n                  Sort cats!\n                </button>\n              </section>\n              <section className=\"sort__field\">\n                <label htmlFor=\"per-page\">\n                  Meow&apos;s per page:\n                  <select\n                    onChange={(e) => setPageData(prev => ({\n                      ...prev,\n                      catsPerPage: +e.target.value,\n                    }))}\n                    className=\"sort__select\"\n                    id=\"per-page\"\n                    value={pageData.catsPerPage}\n                  >\n                    <option value={20}>20</option>\n                    <option value={50}>50</option>\n                    <option value={100}>100</option>\n                  </select>\n                </label>\n                <button\n                  type=\"button\"\n                  className=\"sort__btn\"\n                  onClick={sortClickHandle}\n                >\n                  View cats!\n                </button>\n              </section>\n            </div>\n            <CatList\n              list={listOfCats}\n              pageData={pageData}\n            />\n          </>\n        )\n        : <Loader />}\n    </main>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { Footer } from './components/Footer/Footer';\nimport { Header } from './components/Header/Header';\nimport { MainContent } from './components/MainContent/Maincontent';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"page\">\n      <Header />\n      <MainContent />\n      <Footer />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}